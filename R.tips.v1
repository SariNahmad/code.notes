######################################
# 8/17/2015
# First version for R tips
# This is currently a list of functions/libraries that I've come to use in various projects
# I'll be adding better, more comprehensive examples next version :) 
# Hope this is useful for you! 


######################################
# Good Practice: when starting a new script clear out files and start from scratch 
closeAllConnections()
rm(list=ls())

# get working directory
getwd()
# set working directory 
setwd()
# create new file in given directory 
dir.create(file.path(DirectoryForNewFolder, newFolderName))

######################################
# Free R Data for practice
# Straight from R environment: 
# https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html  
data(mtcars) # mtcars is a dataset 

# Other sources:
# Kaggle
# City of Chicago 

# THE BASICS:
# I am a comment (#)
x = 1 # a number, you are also assigning the value 1 to the variable x
# this can easily be overwritten
x = "1" # looks like a number but its a character --> look for quotes
# Note: in R "=" is ASSIGNMENT and is equivalent to "<-" expression
print(x) # print something, if you are in a loop or function this is helpful for debugging 

y = c(1,2,3) # a list
# boolean 
x = TRUE # or FALSE , T F also works 
# signs: ==  > < >= <=
# factors
# matrix: has to be all one type
matrix("A",2,3)
# data.frame: can have multiple types (think of this like an excel worksheet)
data.frame(a=character(), b=numeric(), c=character())
data.frame(matrix(NA, nrow= 5 , ncol = 2))

# Basic information:  
head(mtcars)
head(mtcars, n=10)
head(mtcars, n=-1)
tail(mtcars)
ncol(mtcars)
nrow(mtcars)
dim(mtcars)
dim(mtcars)[1]
dim(mtcars)[2]
str(mtcars)
class(mtcars)
names(mtcars)
rownames(mtcars)
colnames(mtcars)
length(mtcars)
unique(mtcars$cyl)
mean(mtcars$cyl)
min()
max()
colMeans(mtcars)
colSums(mtcars)
rowMeans(mtcars)
rowSums(mtcars)

# Nulls 
NA
NULL
x[is.na(x)] <- c("") # replace nulls 

# Boolean Checks: (TRUE/FALSE result)
is.numeric()
is.character()
is.integer()
is.na()
is.null()
is.infinite()
is.finite()

# math! 
1 + 1
1 - 1
1 * 2
1 / 1.2

log(1)
exp(1)
A ** B 
3 ^ 2
3 ** 2
######################################
# Loading data:
# .csv 
data = read.csv("data_Location/data_name.csv", # don't forget the .csv
                stringsAsFactors = FALSE, # recommended; otherwise all character variables will be factors and levels will follow you forever
                header = TRUE, # if the data has a header
                na.strings = c("NA",""," ")) # define strings that you want to be recognized as Nulls

# .RData
load("data_Location/data_name.RData")
data = data_name
# .rds
data = readRDS("data_Location/data_name.rda")
# .xls - excel...is another story

# Writing data:
# csv
write.csv(results, "results.csv", row.names = FALSE)
# rds
saveRDS(results, "results.rds")

capture.output() #str()
######################################
# if only working with one dataset, otherwise I wouldn't use this
cyl # error
mtcars$cyl
attach(mtcars)
cyl
detach(mtcars)
######################################
# DATA MANIPULATION 
# changing types
y = c(1,2,3)
as.numeric(y)
as.character(y)
as.data.frame(y)
as.matrix(y)
as.vector(y)

# indexes
mtcars[1,]
mtcars[,1]
mtcars[c(1,5:6), 1:3]
mtcars[,"mpg"]
mtcars$mpg

# keep only columns: 
mtcars[ , c("mpg", "cyl")]

# remove columns (by not having to say all the columns you want to keep)
mtcars[ , !colnames(mtcars) %in% c("mpg", "cyl")]

# row bind (must have same columns & column names)
rbind(mtcars[1,], mtcars[1,])
# column bind (must have save nrow)
cbind(mtcars[,1], mtcars[,2])


# rename columns:
# all at once
names(mtcars) = c("mpg1111111111", "cyl", "disp2", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
names(mtcars)
names(mtcars) = c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
# just one
names(mtcars)[1] = "mpg1" 
# rename one by name
names(mtcars)[names(mtcars) == 'mpg1'] <- 'mpg'

floor()
ceiling()
round()

rep() # replicate
seq() # sequence
scale() # scale 

t(mtcars) # transpose (makes it a matrix trpe)

head(melt(mtcars, id=c("mpg"))) #library(reshape2)
# cast(data, formula, function) 

# transform character to variable object 
get("mtcars")

######################################
split()

apply()
sapply()
lapplys()

aggregate()

######################################
# character manipulation stuff 
gsub("@", " ", "hello@buudddy")
gsub(".", " ", "hello.buudddy") # nope
gsub("\\.", " ", "hello.buudddy") # yep

substr("helloMr", 3,7)
grep("hello", c("hellothere", "hello", "hell"))
grepl("hello", c("hellothere", "hello", "hell"))
library(reshape2)
colsplit("col1-col2", "-", c("col1", "col2"))

paste("a", "b", "c", sep="-->")
######################################
# text mining and cleansing 
library(tm)
textdata = str_replace_all(textdata,"[^[:graph:]]", " ") ## Remove all non graphical characters
vs = VectorSource(textdata) #Use Vector Source
myCorpus <- Corpus(vs) #Create Corpus  
myCorpus = tm_map(myCorpus, content_transformer(tolower)) #Change to lower case
myCorpus = tm_map(myCorpus, removeNumbers) #Remove Numbers
myCorpus = tm_map(myCorpus, removePunctuation) #Remove Punctuation #keep @ and #, preserve_intra_word_dashes = TRUE
myCorpus = tm_map(myCorpus, removeWords, c(stopwords("english"),removewords))#"rt ")) #Remove Stopwords 
myCorpus = tm_map(myCorpus, stripWhitespace) #Strip Whitespaces
myCorpus = tm_map(myCorpus, stemDocument) #Stemming
myCorpus = tm_map(myCorpus, PlainTextDocument)
tdm = TermDocumentMatrix(myCorpus, control = list(wordLengths = c(1, Inf)))


######################################
# plotting
plot()
hist()
######################################
# loops 
if (i==1){ 
  ...
}

for(i in 1:length(x)){
  ...
}

# writing a function 
myFunctionName = function(input1, input2, ...){
  require(sqldf) # when you function uses a package
  result = input1 + input2
  result = list(result, input1, input2) # return more then one object: must make a list
  return(result)
}

# calling function
x = myFunctionName(1,2)
x[[1]] # retriving objects from a list 

######################################
# libraries 
# installing a library
install.packages("sqldf") # only once: can also go to tools > install packages 

library(sqldf) # write SQL statements on R data frames...YES, life changer
sqldf("select * from DATA")

library(reshape2) # another game changer 
melt()
cast()


library(ggplot2) # Data viz
library(manipulate) # interactive plots
library(googleVis) # google plots! 
library(dplyr) # data manipulation 
library(lubridate) # work with dates and times 
library(stringr) # regular expressions and character strings
library(RODBC) # connect to database, such as sql server
library(RPostgresSQL)  # connect to database
library(RSQLite)  # connect to database
library(parallel) # parallel processing
library(caret) # modeling
library(randomForest) # random forests
library(zoo) # time series 
library(leaps) # variable selection : leaps & regsubset 
library(quantmod) # download financial data (FRED)
library(shiny) # have been hearing more about this lately 
library(XML) #xml
library(jsonlite) # JSON 
library(rjson) # JSON 
library(wordcloud)
library(tm) # Text Mining Package
library(parmigene) # mrmr: variable reduction (max relevance min redundany)


######################################
# dealing with JSON
library(rjson)
data <- rjson::fromJSON(sprintf("[%s]", paste(readLines(json_file),collapse=",")))

intermediate <- lapply(data,function(l){
  nullmask <- unlist(lapply(l, is.null))
  l[nullmask] <- NA
  l
})

# result list, loop through for extraction 
######################################
# RUNNING A SCRIPT FROM COMMAND LINE (windows 8 --> yuck)
# command line arguments:
# > Rscript.exe myScriptName.R <arg[1]> <arg[2]> <...>
options(echo=FALSE) # set to TRUE if you want see commands in output file
args = commandArgs(trailingOnly = TRUE)
myArg1 = args[1]

#supress.warnings(x)

# call from other script
source()

######################################
name.data.frame = function(objname, data_frame){assign(objname, data_frame,envir=.GlobalEnv)}


split.names = function(data, columnToSplit, newColumnName1, newColumnName2, splitCharacter){
  data$newcol1= NA; data$newcol2 = NA
  for (i in 1:nrow(data)){ 
    #data$newcol1[i] = strsplit(levels(droplevels(columnToSplit[i])), splitCharacter)[[1]][1]
    #data$newcol2[i] = strsplit(levels(droplevels(columnToSplit[i])), splitCharacter)[[1]][2]
    
    data$newcol1[i] = strsplit(columnToSplit[i], splitCharacter)[[1]][1]
    data$newcol2[i] = strsplit(columnToSplit[i], splitCharacter)[[1]][2]
  }
  colnames(data)[colnames(data)=="newcol1"] = newColumnName1
  colnames(data)[colnames(data)=="newcol2"] = newColumnName2
  return(data)
}
